{ pkgs, ... }:

let
  json = pkgs.formats.json { };

  # For things that should only apply to Emacs
  emacsCondition = {
    type = "frontmost_application_if";
    bundle_identifiers = [
      "^org\\.gnu\\.Emacs$"
      "^org\\.gnu\\.Emacs-.*$"
      "^net\\.mitsuya\\.Emacs$"
    ];
  };

  disableShortcut = from: {
    type = "basic";
    inherit from;
    to = [ { key_code = "vk_none"; } ];
    conditions = [ emacsCondition ];
  };

  # macOS shortcuts to disable (note that this is affected by how we swap ctrl and cmd)
  # This was generated by ChatGPT from a diff of com.apple.symbolichotkeys.plist files, so could be wrong
  shortcuts = [
    # Spotlight
    {
      key_code = "spacebar";
      modifiers = {
        mandatory = [ "control" ];
      };
    }
    {
      key_code = "spacebar";
      modifiers = {
        mandatory = [
          "control"
          "option"
        ];
      };
    }

    # Mission Control / App windows / Move between Spaces
    {
      key_code = "up_arrow";
      modifiers = {
        mandatory = [ "command" ]; # TODO control or command?
      };
    }
    {
      key_code = "down_arrow";
      modifiers = {
        mandatory = [ "command" ]; # TODO control or command?
      };
    }
    {
      key_code = "left_arrow";
      modifiers = {
        mandatory = [ "command" ]; # TODO control or command?
      };
    }
    {
      key_code = "right_arrow";
      modifiers = {
        mandatory = [ "command" ]; # TODO control or command?
      };
    }

    # Dock toggle
    {
      key_code = "d";
      modifiers = {
        mandatory = [
          "control"
          "option"
        ];
      };
    }

    # Help menu
    {
      key_code = "slash";
      modifiers = {
        mandatory = [
          "control"
          "shift"
        ];
      };
    }

    # Quick Note (Fn-Q / Globe-Q)
    {
      key_code = "q";
      modifiers = {
        mandatory = [ "fn" ];
      };
    }
  ];

  # For things that should NOT apply to certain terminals
  terminalsCondition = {
    type = "frontmost_application_unless";
    bundle_identifiers = [
      "^com\\.mitchellh\\.ghostty$"
      "^org\\.alacritty$"
      "^net\\.kovidgoyal\\.kitty$"
    ];
  };

  swapModifiers = pair: {
    type = "basic";
    from = { key_code = pair.from; };
    to   = [ { key_code = pair.to; } ];
    conditions = [ terminalsCondition ];
  };

  modifierPairs = [
    { from = "left_command";  to = "left_control";  }
    { from = "left_control";  to = "left_command";  }
    { from = "right_command"; to = "right_control"; }
    { from = "right_control"; to = "right_command"; }
  ];

  karabiner = {
    profiles = [
      {
        name = "Default profile";
        selected = true;
        virtual_hid_keyboard = {
          keyboard_type_v2 = "iso";
        };

        complex_modifications = {
          rules = [
            {
              description = "Swap cmd and ctrl (except in ghossty and alacritty";
              manipulators = builtins.map swapModifiers modifierPairs;
            }

            {
              manipulators = [
                {
                  description = "Change caps_lock to command+control+option+shift.";
                  type = "basic";
                  from = {
                    key_code = "caps_lock";
                    modifiers = {
                      optional = [ "any" ];
                    };
                  };
                  to = [
                    {
                      key_code = "left_shift";
                      modifiers = [
                        "left_command"
                        "left_control"
                        "left_option"
                      ];
                    }
                  ];
                }
              ];
            }

            {
              description = "Disable various macOS shortcuts in Emacs";
              manipulators = builtins.map disableShortcut shortcuts;
            }
          ];
        };
      }
    ];
  };
in
{
  xdg.configFile."karabiner/karabiner.json".source = json.generate "karabiner.json" karabiner;
}
